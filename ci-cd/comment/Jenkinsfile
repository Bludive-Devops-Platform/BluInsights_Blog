pipeline {
    agent any

    environment {
        IMAGE_NAME = "bludivehub/bluinsights-comment-service"
        IMAGE_TAG = "${IMAGE_NAME}:${env.BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = 'Dockerhub-creds'
        NAMESPACE = 'bluinsights'
        CHART_PATH = "${env.WORKSPACE}/helm-charts/comment-service"
        SNYK_TOKEN = credentials('snyk-api-token')
	DOCKERFILE = './backend/comment-service/Dockerfile'
    }

    stages {
        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${IMAGE_TAG} ./backend/comment-service"
                }
            }
        }

        stage('Scan Docker Image for Vulnerabilities') {
            steps {
                script {
                    sh "snyk container test ${IMAGE_TAG} --severity-threshold=high --docker ${IMAGE_NAME} --file=${DOCKERFILE}" || true
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(
                        credentialsId: REGISTRY_CREDENTIALS, 
                        usernameVariable: 'DOCKER_USER', 
                        passwordVariable: 'DOCKER_PASS'
                    )]) {
                        sh """
                            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                            docker push ${IMAGE_TAG}
                        """
                    }
                }
            }
        }

        stage('Deploy via Helm') {
            steps {
                script {
		    echo "Deploying Helm chart for comment-service"
		    withCredentials([file(credentialsId: 'k8s-kubeconfig-file', variable: 'KUBECONFIG')]) {	
                    	def valuesArg = "--set image.tag=${env.BUILD_NUMBER}"
                    	sh "helm upgrade --install comment-service ${CHART_PATH} -n ${NAMESPACE} ${valuesArg} --wait"
		    }
                }
            }
        }
    }

    post {
        always { sh "docker rmi ${IMAGE_TAG} || true" }
    }
}
 
