pipeline {
    agent any

    environment {
        IMAGE_NAME = "bludivehub/bluinsights-blog-service"
        IMAGE_TAG = "${IMAGE_NAME}:${env.BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = 'dockerhub-credentials'
        NAMESPACE = 'bluinsights'
        CHART_PATH = '../../helm-charts/blog-service'
        SNYK_TOKEN = credentials('snyk-api-token')
    }

    stages {
        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image ${IMAGE_TAG}"
                    sh "docker build -t ${IMAGE_TAG} ./backend/blog-service"
                }
            }
        }

        stage('Scan Docker Image for Vulnerabilities') {
            steps {
                script {
                    echo "Scanning image ${IMAGE_TAG} with Snyk"
                    sh """
                        snyk container test ${IMAGE_TAG} --severity-threshold=high --docker ${IMAGE_NAME} --file=Dockerfile
                    """
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    echo "Pushing Docker image ${IMAGE_TAG}"
                    withCredentials([usernamePassword(
                        credentialsId: REGISTRY_CREDENTIALS, 
                        usernameVariable: 'DOCKER_USER', 
                        passwordVariable: 'DOCKER_PASS'
                    )]) {
                        sh """
                            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                            docker push ${IMAGE_TAG}
                        """
                    }
                }
            }
        }

        stage('Deploy via Helm') {
            steps {
                script {
                    echo "Deploying Helm chart for blog-service"
                    def valuesArg = "--set image.tag=${env.BUILD_NUMBER}"
                    sh "helm upgrade --install blog-service ${CHART_PATH} -n ${NAMESPACE} ${valuesArg} --wait"
                }
            }
        }
    }

    post {
        always {
            echo "Cleaning up local Docker images"
            sh "docker rmi ${IMAGE_TAG} || true"
        }
        success { echo "Pipeline completed successfully!" }
        failure { echo "Pipeline failed. Check logs." }
    }
}
 
